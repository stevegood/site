<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JBake</title>
    <link>https://stevegood.github.io</link>
    <atom:link href="https://stevegood.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <description>JBake Bootstrap Template</description>
    <language>en-gb</language>
    <pubDate>Tue, 23 Aug 2016 05:47:21 +0000</pubDate>
    <lastBuildDate>Tue, 23 Aug 2016 05:47:21 +0000</lastBuildDate>

    <item>
      <title>Moving to GitHub Pages</title>
      <link>https://stevegood.github.io/2016/08/17/moving-to-github-pages.html</link>
      <pubDate>Wed, 17 Aug 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">2016/08/17/moving-to-github-pages.html</guid>
      	<description>
	&lt;h1&gt;Ghost + Pivotal CF = &amp;lt;3&lt;/h1&gt;&lt;p&gt;Last year I moved my blog to &lt;a href=&quot;https://ghost.org/&quot;&gt;Ghost&lt;/a&gt; and hosted it in &lt;a href=&quot;https://pivotal.io/platform/pcf-tutorials/getting-started-with-pivotal-cloud-foundry?utm_source=menu&amp;utm_medium=link&amp;utm_campaign=gettingstartedwithpcf&quot;&gt;Pivotal CF&lt;/a&gt;. This has been great so far but I&apos;m starting to get twitchy about paying for an application to be running in PCF when I rarely update anything. This is my response to that concern.&lt;/p&gt;&lt;h2&gt;GitHub Pages&lt;/h2&gt;&lt;p&gt;There are a number of advantages to using GitHub Pages over a blogging application but for the most part I really like the price. &lt;strong&gt;Free&lt;/strong&gt;. Sure, static content loads faster than generated content, and GitHub is pretty amazing but in reality, this is going to be more work when writing blog posts than using Ghost (or any other blogging platform for that matter). But that price! Also, I think the workflow of writing blog posts going forward will look a whole lot more like my typical software development with the added step of generating the static content (I&apos;m using &lt;a href=&quot;http://jbake.org/&quot;&gt;JBake&lt;/a&gt;).&lt;/p&gt;&lt;h2&gt;Moar Posts?&lt;/h2&gt;&lt;p&gt;No, probably not yet. I have a whole lot going on in my life right now that is taking up the vast majority of my time. However, I will certainly feel better about not blogging as often since it won&apos;t be costing my anything ( &lt;em&gt;have I harped of the cost enough yet?&lt;/em&gt; ).&lt;/p&gt;&lt;p&gt;More to come later (and I hope to figure out how to get comments added).&lt;/p&gt;
	</description>
    </item>
    <item>
      <title>So You Want to Learn to Program?</title>
      <link>https://stevegood.github.io/2015/9/11/so-you-want-to-learn-to-program.html</link>
      <pubDate>Fri, 11 Sep 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">2015/9/11/so-you-want-to-learn-to-program.html</guid>
      	<description>
	&lt;p&gt;I get asked all the time &lt;a href=&quot;http://twitch.tv/ExtremeModeration/&quot;&gt;on my stream&lt;/a&gt; which language someone should learn when they first get started. I typically start by asking what the end goal is. Want to build games? Websites? Desktop applications? The answer to that question will lead new developers in totally different directions. I recently found a pretty good &lt;a href=&quot;http://carlcheo.com/startcoding&quot;&gt;infographic&lt;/a&gt; to help young developers choose a language that best suites their goals.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://carlcheo.com/wp-content/uploads/2014/12/which-programming-language-should-i-learn-first-infographic.png&quot;&gt;&lt;img src=&quot;http://carlcheo.com/wp-content/uploads/2014/12/which-programming-language-should-i-learn-first-infographic.png&quot; alt=&quot;http://carlcheo.com/wp-content/uploads/2014/12/which-programming-language-should-i-learn-first-infographic.png&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
	</description>
    </item>
    <item>
      <title>Moving Forward and a Tiny Planet</title>
      <link>https://stevegood.github.io/2013/06/04/moving-forward-and-a-tiny-planet.html</link>
      <pubDate>Tue, 4 Jun 2013 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">2013/06/04/moving-forward-and-a-tiny-planet.html</guid>
      	<description>
	&lt;h2&gt;Moving Forward&lt;/h2&gt;&lt;p&gt;For the last two years I have been a full time contractor at &lt;a href=&quot;http://kainexus.com&quot;&gt;KaiNexus&lt;/a&gt; serving as their Principal Architect. During this that time I made new friends and had the opportunity to work on a project that could leave a great positive mark on the world. However, as with all things, this chapter has come to a close. Starting this month I will be transitioning from KaiNexus to Cisco Systems. While I&apos;m not a big fan of the corporate machine, the team I&apos;ll be working with is small and has that startup feel about it. I&apos;ll still be working with Flex but I&apos;ll be focusing much less on the server-side of the application, which is a big shift for me.&lt;/p&gt;&lt;p&gt;In addition to a change in career, I&apos;ve moved my site, as you may have noticed. Last May &lt;a href=&quot;http://stevegood.org/blog/2012/5/24/grails-and-bootstrap-and-jelastic-oh-my&quot;&gt;I moved my site from Posterous to a custom built Grails application running on Jelastic&lt;/a&gt;. A few months later I moved the application again from &lt;a href=&quot;http://jelastic.com&quot;&gt;Jelastic&lt;/a&gt; to &lt;a href=&quot;http://appfog.com&quot;&gt;AppFog&lt;/a&gt; as an experiment. Sadly, that experiment never quite met my expectations. During my time hosting the application on AppFog I experienced many outages, difficulties in deployment and had to make significant changes to the app just to get it to run. This was a very different experience from Jelastic where deployment was a no brainer, was always up and required no code changes to make it compatible. I&apos;ve raved about Jelastic in the past and I still do, however, as my time becomes more limited and I spend more free time persuing photography I find myself letting the Grails app I built fall behind. I just don&apos;t have the drive to maintain it anymore. As a result, I&apos;ve moved my site off of my home brew application and over to Squarespace. So far, the experience has been pleasant. My only issue has been with migrating comments (if you know how I can do this please let me know!) and as a result I&apos;ve left some posts off the new site.&lt;/p&gt;&lt;p&gt;So far June has been an exciting month of change. I&apos;m looking forward to seeing what else is on the horizon!&lt;/p&gt;&lt;h2&gt;A Tiny Planet&lt;/h2&gt;&lt;p&gt;A few weeks ago I decided to try my hand at a quirky form of panoramic photography. The process involves shooting a series of overlapping photos 360 degrees around a fixed point, just like with a typical panorama. The fun part comes into play when you take the stitched photos into Photoshop and turn them into a sphere. The result is a tiny planet with giant landscape and buildings. After shooting a few of these it seems like the most successful shots are of scenes with little skyline clutter and only a few tall points of interest. Here&apos;s one of my favorites of a simple parking lot in Fort Worth.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://dl.dropboxusercontent.com/u/208899/blog/parking-lot-pano-1.jpg&quot;&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/208899/blog/parking-lot-pano-1.jpg&quot; alt=&quot;https://dl.dropboxusercontent.com/u/208899/blog/parking-lot-pano-1.jpg&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
	</description>
    </item>
    <item>
      <title>Simple URL Monitor Using Groovy and Twilio</title>
      <link>https://stevegood.github.io/2012/08/23/simple-url-monitor-using-groovy-and-twilio.html</link>
      <pubDate>Thu, 23 Aug 2012 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">2012/08/23/simple-url-monitor-using-groovy-and-twilio.html</guid>
      	<description>
	&lt;p&gt;Recently, the need arose for me to monitor a URL so that notifications could be sent out if the site was suddenly unavailable. Later on down the road this will need to evolve into a more proactive system rather than reactive but for now I am just focusing on site down notifications.&lt;/p&gt;&lt;p&gt;To start, I set some minimal requirements for myself.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Needs to be easy to write, can&apos;t take more than an hour to build&lt;/li&gt;
  &lt;li&gt;Needs to be easy to maintain, problems should be easy to find and fix&lt;/li&gt;
  &lt;li&gt;Needs to be able to send SMS messages in case of outages&lt;/li&gt;
  &lt;li&gt;Needs to be able to run standalone or on a server under cron&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;When looking at the requirements I had to think about what kind of scripting environment would be best served for the task. I had several options available to me each with pros and cons.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;bash
  &lt;ul&gt;
    &lt;li&gt;Pros
    &lt;ul&gt;
      &lt;li&gt;Runs natively on any *nix based system
&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
    &lt;li&gt;Cons
    &lt;ul&gt;
      &lt;li&gt;Extremely verbose&lt;/li&gt;
      &lt;li&gt;Will not run on non *nix based systems
&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li&gt;Perl
  &lt;ul&gt;
    &lt;li&gt;Pros
    &lt;ul&gt;
      &lt;li&gt;I would be able to drudge up ancient knowledge that I had buried deep in the catacombs of my mind&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
    &lt;li&gt;Cons
    &lt;ul&gt;
      &lt;li&gt;I don&apos;t have enough time to drudge up my ancient, and dusty, knowledge of Perl&lt;/li&gt;
      &lt;li&gt;I would spend too much time trying to figure out how to do everything in a single line of code&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li&gt;Groovy
  &lt;ul&gt;
    &lt;li&gt;Pros
    &lt;ul&gt;
      &lt;li&gt;I work with Groovy every day at work&lt;/li&gt;
      &lt;li&gt;I can use Grape to supply dependencies using the @Grab annotation&lt;/li&gt;
      &lt;li&gt;Code tends to be clean and simple&lt;/li&gt;
      &lt;li&gt;Can be run on any system that has Groovy installed&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
    &lt;li&gt;Cons
    &lt;ul&gt;
      &lt;li&gt;Must have Groovy installed&lt;/li&gt;
      &lt;li&gt;It is a little slow to startup&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;It should be no surprise that I chose to use Groovy for this project. For me, Groovy just fits the bill better in terms of code verbosity and features available.&lt;/p&gt;&lt;p&gt;Building the script was a snap. One of the cool things about shell scripting is that you are able to specify the binary that you want to use to execute your script. So by adding a single line of declaration I was able to create a script that can run as if it was a native executable.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/bin/env groovy
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After that it&apos;s just a matter of writing the code that does the work! Lets start with the dependent libraries.&lt;/p&gt;&lt;p&gt;First I needed to make sure I had the HTTP-Builder library. Grape makes this a snap to get by letting me take advantage of the &lt;a href=&quot;mailto:&amp;#95;@&amp;#71;&amp;#x72;&amp;#x61;&amp;#x62;&amp;#x5f;&quot;&gt;&amp;#95;@&amp;#71;&amp;#x72;&amp;#x61;&amp;#x62;&amp;#x5f;&lt;/a&gt; annotation. I just place the following towards the top of my script and like magic everything I need is available.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Grab(group=&amp;#39;org.codehaus.groovy.modules.http-builder&amp;#39;, module=&amp;#39;http-builder&amp;#39;, version=&amp;#39;0.5.2&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I also need to make sure I have the Apache commons httpclient libraries. I use another &lt;a href=&quot;mailto:&amp;#95;&amp;#x40;&amp;#x47;r&amp;#97;&amp;#x62;&amp;#95;&quot;&gt;&amp;#95;&amp;#x40;&amp;#x47;r&amp;#97;&amp;#x62;&amp;#95;&lt;/a&gt; to do this.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Grab(group=&amp;#39;commons-httpclient&amp;#39;,module=&amp;#39;commons-httpclient&amp;#39;,version=&amp;#39;3.1&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Grape is actually going out to the maven repositories and downloading the jars I requested and adding them to my classpath. Pretty slick eh?&lt;/p&gt;&lt;p&gt;I&apos;ll skip the imports (but you can check out the full source if those kinds of things excite you) and just straight to the guts of the script.&lt;/p&gt;&lt;p&gt;Next, among other things, I wanted to make sure that the script was configurable enough that I could add a list of phone numbers and be able to easily specify the url to monitor. To do that I created a nice little HashMap of key value pairs.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def options = [
        server: &amp;quot;https://google.com/&amp;quot;,
        intervalSeconds: 600,
        sid: &amp;quot;&amp;quot;,
        authToken: &amp;quot;&amp;quot;,
        fromPhone: &amp;quot;&amp;quot;,
        toPhone: &amp;quot;&amp;quot;,
        smsOnStart: false,
        smsOnStartMessage: &amp;quot;Site monitoring script started at ${new Date().format(&amp;#39;H:mm:ss&amp;#39;)} on ${new Date().format(&amp;#39;yyyy-MM-dd&amp;#39;)}&amp;quot;
]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Ok, so options are great, but without some functionality they really mean nothing. Next I define two functions.&lt;/p&gt;&lt;p&gt;Here&apos;s the method that sends the SMS.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def sendSMS(def message, def opts){
    if (opts.sid != &amp;quot;&amp;quot; &amp;amp;&amp;amp; opts.authToken != &amp;quot;&amp;quot; &amp;amp;&amp;amp; message != &amp;quot;&amp;quot;){
        String twilioHost = &amp;quot;api.twilio.com&amp;quot;
        String sid = opts.sid
        String authToken = opts.authToken

        def hc = new HostConfiguration()
        hc.setHost(twilioHost, 443, &amp;quot;https&amp;quot;)
        def url = &amp;quot;/2010-04-01/Accounts/$sid/SMS/Messages&amp;quot;

        def client = new HttpClient()
        Credentials defaultcreds = new UsernamePasswordCredentials(sid, authToken)
        client.getState().setCredentials(null, null, defaultcreds)

        opts.toPhone.split(&amp;#39;,&amp;#39;)?.each { toPhn -&amp;gt;
            PostMethod postMethod = new PostMethod(url)
            postMethod.addParameter(&amp;quot;IfMachine&amp;quot;,&amp;quot;Continue&amp;quot;)
            postMethod.addParameter(&amp;quot;Method&amp;quot;,&amp;quot;POST&amp;quot;)
            postMethod.addParameter(&amp;quot;From&amp;quot;,opts.fromPhone)
            postMethod.addParameter(&amp;quot;To&amp;quot;,toPhn)
            postMethod.addParameter(&amp;quot;Body&amp;quot;,message)

            client.executeMethod(hc, postMethod)

            postMethod.releaseConnection()
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And here&apos;s the method that checks the status of the url.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def doPing(def opts) {
    if (opts.server != &amp;quot;&amp;quot;){
        try {
            new HTTPBuilder( opts.server ).get( path:&amp;#39;&amp;#39; ) { response -&amp;gt;
                def msg = &amp;quot;&amp;quot;
                if (response.statusLine.statusCode == 200){
                    msg = &amp;quot;${new Date()} :: UP!&amp;quot;
                    println msg
                } else {
                    msg = &amp;quot;${new Date()} :: There might be a production problem! -&amp;gt; ${response.statusLine.statusCode}&amp;quot;
                    println msg
                    sendSMS(msg,opts)
                }
            }
        } catch( e ){
            println &amp;quot;${new Date()}&amp;quot;
            e.printStackTrace()
            sendSMS(&amp;quot;There was an error when connecting to the production server, it might be down.&amp;quot;,opts)
        }

        if (opts.intervalSeconds &amp;gt; 0){
            def then = new Date()
            then.seconds += opts.intervalSeconds
            println &amp;quot;Checking again at ${then}&amp;quot;
            while (new Date() &amp;lt;= then){
                // do nothing
            }

            doPing( opts )
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Since these are both method declarations and they won&apos;t just call themselves we need to do one last thing, call the doPing method.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (options.smsOnStart){
    sendSMS(options.smsOnStartMessage,options)
}

doPing( options )
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That&apos;s the whole script! If you are interested in looking at or using the script &lt;a href=&quot;https://github.com/stevegood/groovy-url-monitor&quot;&gt;Github&apos;s&lt;/a&gt; going to be the best place to do that. With comments and code the whole thing come to a mere 106 lines of code! Not bad for something that monitors a URL and then sends an SMS when there is a problem.&lt;/p&gt;&lt;p&gt;I know I glossed over how the methods actually work but I felt they were pretty self explanatory. Feel free to ask questions in the comments if you would like further explanation.&lt;/p&gt;&lt;p&gt;Thanks for reading!&lt;/p&gt;
	</description>
    </item>

  </channel> 
</rss>
